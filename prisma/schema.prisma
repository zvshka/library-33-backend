generator client {
  provider = "prisma-client-js"
}

//generator prismaClassGenerator {
//    provider   = "prisma-class-generator"
//    useSwagger = true
//    dryRun     = false
//    output     = "../src/DTO/"
//}

//generator docs {
//  provider = "node node_modules/prisma-docs-generator"
//}
//
//generator dbml {
//  provider = "prisma-dbml-generator"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  books Book[]
}

model Book {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(255)

  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int

  real    Real[]
  reviews Review[]
  authors Author[]
  styles  Style[]
  likes   User[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Offence {
  id Int @id @default(autoincrement())

  userId Int
  realId Int

  real Real @relation(fields: [realId], references: [id])
  user User @relation(fields: [userId], references: [id])

  date        DateTime @db.Date
  description String   @db.VarChar(255)
  expire      DateTime @db.Date
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Order {
  id Int @id @default(autoincrement())

  realId Int
  userId Int
  real    Real @relation(fields: [realId], references: [id])
  user    User @relation(fields: [userId], references: [id])

  return_date DateTime @db.Date
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  books Book[]
}

model Real {
  id        Int       @id @default(autoincrement())
  bookId   Int
  book      Book      @relation(fields: [bookId], references: [id])
  available Boolean
  offences  Offence[]
  orders    Order[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Review {
  id     Int    @id @default(autoincrement())
  rating Int
  text   String @db.VarChar(255)

  bookId Int
  userId Int

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Style {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  books Book[]
}

model User {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  email     String  @unique @db.VarChar(255)
  password  String  @db.VarChar(255)
  firstName String? @db.VarChar(255)
  lastName  String? @db.VarChar(255)

  role       RoleEnum  @default(USER)
  likedBooks Book[]
  offences   Offence[]
  orders     Order[]
  reviews    Review[]
  token      Token[]
}

model Token {
  refreshToken String @unique
  userId       Int
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId])
}

enum RoleEnum {
  USER
  ADMIN
}
