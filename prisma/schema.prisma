generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(70)
  description String? @db.VarChar(255)
  books       Book[]
}

model Book {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(70)

  description String? @db.VarChar(120)

  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int

  real    Real[]
  reviews Review[]
  authors Author[]
  styles  Style[]
  likes   User[]
}

model Offence {
  id Int @id @default(autoincrement())

  userId Int
  realId Int

  real Real @relation(fields: [realId], references: [id])
  user User @relation(fields: [userId], references: [id])

  date        DateTime @db.Date
  expire      DateTime @db.Date
  description String   @db.VarChar(255)
}

model Order {
  id Int @id @default(autoincrement())

  realId Int
  userId Int
  real   Real @relation(fields: [realId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  status OrderStatus @default(AWAITS)

  return_date DateTime @db.Date
}

enum OrderStatus {
    AWAITS
    IN_USE
    DONE
    CANCELED
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(120)
  address String? @db.VarChar(70)

  books Book[]
}

model Real {
  id Int @id @default(autoincrement())

  bookId Int
  book   Book @relation(fields: [bookId], references: [id])

  offences Offence[]
  orders   Order[]
}

model Review {
  id     Int    @id @default(autoincrement())
  rating Int
  title  String @db.VarChar(100)
  text   String @db.VarChar(255)

  bookId Int
  userId Int

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Style {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(40)
  description String? @db.VarChar(255)
  books       Book[]
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique @db.VarChar(20)
  email     String  @unique @db.VarChar(40)
  password  String  @db.VarChar(128)
  firstName String? @db.VarChar(30)
  lastName  String? @db.VarChar(30)

  role       RoleEnum  @default(USER)
  secret     String    @default(uuid()) @db.Uuid
  likedBooks Book[]
  offences   Offence[]
  orders     Order[]
  reviews    Review[]
  tokens     Token[]
}

enum RoleEnum {
  USER
  ADMIN
}

model Token {
  refreshToken String @unique

  userId Int  @id
  user   User @relation(fields: [userId], references: [id])
}
